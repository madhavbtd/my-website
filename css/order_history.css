// js/order_history.js

// Firestore फंक्शन्स window ऑब्जेक्ट से उपलब्ध होने चाहिए
const { db, collection, onSnapshot, doc, getDoc, deleteDoc, query, where, orderBy } = window;

// --- DOM एलिमेंट रेफरेंस ---
let tableBody;
let prevPageButton;
let nextPageButton;
let pageInfoSpan;
let searchInput;
let filterDateInput;
let filterStatusSelect;
let showEntriesSelect;
let editModal;
let modalCloseBtn;
let modalBody;
let modalDeleteBtn;
let modalGoToEditBtn; // नया बटन

// --- ग्लोबल वेरिएबल्स ---
let currentPage = 1;
let rowsPerPage = 10;
let allOrders = []; // Firestore से आए सभी ऑर्डर्स
let filteredOrders = []; // फ़िल्टर के बाद बचे ऑर्डर्स
let currentOrderListenerUnsub = null;
let orderIdForModal = null; // Modal में इस्तेमाल के लिए Firestore Order ID

// --- फंक्शन परिभाषाएं ---

// टेबल में ऑर्डर दिखाने का फंक्शन
function renderTableRows(ordersForPage) {
    if (!tableBody) return;
    tableBody.innerHTML = '';

    if (ordersForPage.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="8" style="text-align: center;">No orders found matching criteria.</td></tr>`;
        return;
    }

    ordersForPage.forEach(order => {
        const row = tableBody.insertRow();
        const customerName = order.customerDetails?.fullName || 'N/A';
        const whatsappNo = order.customerDetails?.whatsappNo || '';
        const firestoreOrderId = order.id; // Firestore Document ID

        row.insertCell().textContent = order.orderId || firestoreOrderId; // Custom ID या Firestore ID
        row.insertCell().textContent = customerName;
        row.insertCell().textContent = order.orderDate || '-';
        row.insertCell().textContent = order.deliveryDate || '-';
        row.insertCell().textContent = order.urgent || 'No';
        row.insertCell().textContent = order.status || '-';

        // Actions सेल
        const actionsCell = row.insertCell();
        actionsCell.classList.add('actions');
        // Edit बटन अब Modal खोलेगा
        actionsCell.innerHTML = `<button class="edit-button" data-id="${firestoreOrderId}">Details/Edit</button>`;

        // WhatsApp सेल
        const whatsappCell = row.insertCell();
        whatsappCell.classList.add('send-wtsp-cell');
        if (whatsappNo) {
            const message = encodeURIComponent(`Regarding your order ${order.orderId || firestoreOrderId}...`);
            whatsappCell.innerHTML = `<a href="https://wa.me/${whatsappNo}?text=${message}" target="_blank" title="Send WhatsApp to ${customerName}"><i class="fab fa-whatsapp whatsapp-icon"></i></a>`;
        } else {
            whatsappCell.innerHTML = '-';
        }

        // Edit बटन के लिए Event Listener
        const editBtn = actionsCell.querySelector('.edit-button');
        if(editBtn) {
            editBtn.addEventListener('click', () => {
                openEditModal(firestoreOrderId); // Modal खोलने के लिए Firestore ID पास करें
            });
        }
    });
    addCustomStyles(); // स्टाइलिंग लागू करें
}

// पेजिनेशन अपडेट फंक्शन
function updatePagination(totalFilteredRows) {
    if (!pageInfoSpan || !prevPageButton || !nextPageButton || !showEntriesSelect) return;
    rowsPerPage = parseInt(showEntriesSelect.value || '10');
    const totalPages = Math.ceil(totalFilteredRows / rowsPerPage);
    // currentPage को वैलिड रेंज में रखें
    currentPage = Math.max(1, Math.min(currentPage, totalPages || 1));

    pageInfoSpan.textContent = `Page ${currentPage} of ${Math.max(totalPages, 1)}`;
    prevPageButton.disabled = currentPage === 1;
    nextPageButton.disabled = currentPage === totalPages || totalPages === 0;
}

// पेज बदलने का फंक्शन
function goToPage(page) {
    const totalPages = Math.ceil(filteredOrders.length / rowsPerPage);
    if (page >= 1 && page <= Math.max(totalPages, 1)) {
        currentPage = page;
        displayPaginatedOrders();
    }
}

// फ़िल्टर और पेजिनेशन लागू करने का फंक्शन
function applyFiltersAndPagination() {
    // 1. फ़िल्टर करें
    const searchTerm = searchInput?.value.toLowerCase().trim() || '';
    const filterDate = filterDateInput?.value || '';
    const filterStatus = filterStatusSelect?.value || '';

    filteredOrders = allOrders.filter(order => {
        const searchMatch = !searchTerm ||
                            (order.orderId && String(order.orderId).toLowerCase().includes(searchTerm)) ||
                            (order.customerDetails?.fullName && order.customerDetails.fullName.toLowerCase().includes(searchTerm));
        const dateMatch = !filterDate || order.orderDate === filterDate;
        const statusMatch = !filterStatus || order.status === filterStatus;
        return searchMatch && dateMatch && statusMatch;
    });

    // 2. पेजिनेशन अपडेट करें और दिखाएं
    currentPage = 1; // फ़िल्टर बदलने पर पहले पेज पर जाएं
    displayPaginatedOrders();
}

// वर्तमान पेज के लिए ऑर्डर दिखाने का फंक्शन
function displayPaginatedOrders() {
    if(!tableBody) return;
    rowsPerPage = parseInt(showEntriesSelect?.value || '10');
    const startIndex = (currentPage - 1) * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    const pageOrders = filteredOrders.slice(startIndex, endIndex);

    renderTableRows(pageOrders);
    updatePagination(filteredOrders.length);
}

// Edit Modal खोलने और डेटा भरने का फंक्शन
async function openEditModal(orderDocId) {
    if (!editModal || !modalBody || !modalDeleteBtn || !modalGoToEditBtn) { console.error("Modal elements not found!"); return; }
    if (!db || !doc || !getDoc) { alert("Database functions not available."); return; }

    modalBody.innerHTML = '<p>Loading order details...</p>';
    editModal.style.display = "block";
    orderIdForModal = null; // Clear previous ID
    modalDeleteBtn.disabled = true; // Disable delete initially
    modalGoToEditBtn.onclick = null; // Clear previous edit link

    try {
        const orderRef = doc(db, "orders", orderDocId);
        const docSnap = await getDoc(orderRef);

        if (docSnap.exists()) {
            const order = docSnap.data();
            orderIdForModal = orderDocId; // Store Firestore ID for delete action

            // Populate modal body
            let productsHtml = '<ul>';
            if (order.products && order.products.length > 0) {
                order.products.forEach(p => { productsHtml += `<li>${p.name || 'N/A'} - Qty: ${p.quantity || 'N/A'}</li>`; });
            } else { productsHtml += '<li>No products listed</li>'; }
            productsHtml += '</ul>';

            modalBody.innerHTML = `
                <p><strong>Order ID:</strong> ${order.orderId || orderDocId}</p>
                <p><strong>Customer Name:</strong> ${order.customerDetails?.fullName || 'N/A'}</p>
                <p><strong>WhatsApp No:</strong> ${order.customerDetails?.whatsappNo || 'N/A'}</p>
                <p><strong>Address:</strong> ${order.customerDetails?.address || 'N/A'}</p>
                <hr>
                <p><strong>Order Date:</strong> ${order.orderDate || 'N/A'}</p>
                <p><strong>Delivery Date:</strong> ${order.deliveryDate || 'N/A'}</p>
                <p><strong>Priority:</strong> ${order.urgent || 'N/A'}</p>
                <p><strong>Status:</strong> ${order.status || 'N/A'}</p>
                <p><strong>Remarks:</strong> ${order.remarks || 'N/A'}</p>
                <hr>
                <strong>Products:</strong> ${productsHtml}
            `;
             modalDeleteBtn.disabled = false; // Enable delete button
             // Setup Go To Edit Page button link
             modalGoToEditBtn.onclick = () => { window.location.href = `new_order.html?editOrderId=${orderDocId}`; };

        } else {
            console.error("Order document not found in modal!");
            modalBody.innerHTML = '<p style="color:red;">Error: Order details not found.</p>';
        }
    } catch (error) {
        console.error("Error fetching order details for modal:", error);
        modalBody.innerHTML = '<p style="color:red;">Error loading order details.</p>';
    }
}

// Modal बंद करने का फंक्शन
function closeModal() {
    if (editModal) { editModal.style.display = "none"; orderIdForModal = null; }
}

// Firestore से ऑर्डर डिलीट करने का फंक्शन
async function deleteOrderFromFirestore() {
    if (!orderIdForModal) { alert("No order selected for deletion."); return; }
    if (!db || !doc || !deleteDoc) { alert("Database delete function not available."); return; }

    if (confirm(`Are you sure you want to delete order ID ${orderIdForModal}? This cannot be undone.`)) {
        try {
             modalDeleteBtn.disabled = true; modalDeleteBtn.textContent = 'Deleting...';
             await deleteDoc(doc(db, "orders", orderIdForModal));
             alert("Order deleted successfully!");
             closeModal();
             // List will update via onSnapshot
        } catch (error) {
            console.error("Error deleting order:", error);
            alert("Error deleting order: " + error.message);
        } finally {
             modalDeleteBtn.disabled = false; modalDeleteBtn.textContent = 'Delete Order';
        }
    }
}

// --- Firestore Listener सेट अप ---
function listenToOrders() {
    if (currentOrderListenerUnsub) { currentOrderListenerUnsub(); currentOrderListenerUnsub = null; }
    try {
        if (!db) throw new Error("Firestore not initialized");
        const ordersRef = collection(db, "orders");
        const q = query(ordersRef, orderBy("createdAt", "desc")); // Sort by creation time, newest first

        currentOrderListenerUnsub = onSnapshot(q, (snapshot) => {
            console.log("Order snapshot received");
            allOrders = [];
            snapshot.forEach((doc) => { allOrders.push({ id: doc.id, ...doc.data() }); });
            console.log("Total orders fetched:", allOrders.length);
            applyFiltersAndPagination(); // Initial display and filter application
        }, (error) => {
            console.error("Error listening to order updates: ", error);
            if(tableBody) tableBody.innerHTML = `<tr><td colspan="8" style="text-align:center; color:red;">Error loading orders. Check console.</td></tr>`;
        });
    } catch (e) {
        console.error("Error setting up Firestore listener: ", e);
         if(tableBody) tableBody.innerHTML = `<tr><td colspan="8" style="text-align:center; color:red;">Database connection error. Check console.</td></tr>`;
    }
}

// --- कस्टम स्टाइलिंग --- (CSS क्लास और स्टाइल जोड़ने का फंक्शन)
function addCustomStyles() {
    const styleId = 'order-history-styles';
    if (document.getElementById(styleId)) return; // पहले से है तो दोबारा न जोड़ें

    const styleSheet = document.createElement("style");
    styleSheet.id = styleId;
    styleSheet.innerHTML = `
        /* Action buttons styles */
        .action-btn { background: none; border: none; cursor: pointer; padding: 2px 5px; margin: 0 2px; font-size: 14px; }
        .action-btn i { pointer-events: none; }
        .action-btn.edit-btn { color: #0d6efd; }
        .action-btn.delete-btn { color: #dc3545; }
        .action-btn:hover { opacity: 0.7; }
        td.actions { text-align: center; }
        /* WhatsApp icon style */
        .whatsapp-icon { font-size: 20px; color: #25d366; cursor: pointer; vertical-align: middle; }
        .whatsapp-icon:hover { opacity: 0.8; }
        td.send-wtsp-cell { text-align: center; }
        /* Edit button in table */
        button.edit-button { background-color: #007bff; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; font-size: 12px; }
        button.edit-button:hover { background-color: #0056b3; }
        /* Ensure table layout is fixed if needed */
        #order-table { table-layout: fixed; word-wrap: break-word; }
        #order-table td { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        #order-table td:nth-child(1) { width: 15%; } /* Order ID width */
        #order-table td:nth-child(2) { width: 20%; } /* Customer Name width */
        /* Adjust other column widths as needed */
    `;
    document.head.appendChild(styleSheet);
}

// --- इवेंट लिसनर्स ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM loaded: order_history.js");

    // DOM एलिमेंट्स प्राप्त करें
    tableBody = document.querySelector('#order-table tbody');
    prevPageButton = document.querySelector('#prev-page');
    nextPageButton = document.querySelector('#next-page');
    pageInfoSpan = document.querySelector('#page-info');
    searchInput = document.querySelector('#search-input'); // <<< ID अपडेट की गई
    filterDateInput = document.querySelector('#filter-date');
    filterStatusSelect = document.querySelector('#filter-status');
    showEntriesSelect = document.querySelector('#show-entries');
    editModal = document.getElementById("editModal");
    modalCloseBtn = editModal?.querySelector("#modalCloseBtn"); // <<< ID अपडेट की गई
    modalBody = document.getElementById("modal-body");
    modalDeleteBtn = document.getElementById("modalDeleteBtn");
    modalGoToEditBtn = document.getElementById("modalGoToEditBtn"); // <<< नया बटन

    // जांचें कि सभी ज़रूरी एलिमेंट्स मौजूद हैं
    if (!tableBody || !prevPageButton || !nextPageButton || !pageInfoSpan || !searchInput || !filterDateInput || !filterStatusSelect || !showEntriesSelect || !editModal || !modalCloseBtn || !modalBody || !modalDeleteBtn || !modalGoToEditBtn) {
        console.error("One or more essential page elements are missing! Check IDs.");
        if(tableBody) tableBody.innerHTML = `<tr><td colspan="8" style="text-align:center; color:red;">Page Error: Elements missing.</td></tr>`;
        return;
    } else {
         tableBody.innerHTML = '<tr><td colspan="8" style="text-align: center;">Initializing...</td></tr>';
    }

    // इवेंट लिसनर्स लगाएं
    prevPageButton.addEventListener('click', () => goToPage(currentPage - 1));
    nextPageButton.addEventListener('click', () => goToPage(currentPage + 1));
    showEntriesSelect.addEventListener('change', () => { currentPage = 1; applyFiltersAndPagination(); });
    searchInput.addEventListener('input', applyFiltersAndPagination);
    filterDateInput.addEventListener('change', applyFiltersAndPagination);
    filterStatusSelect.addEventListener('change', applyFiltersAndPagination);

    // Modal इवेंट्स
    modalCloseBtn.addEventListener('click', closeModal);
    window.addEventListener('click', (event) => { if (event.target === editModal) closeModal(); });
    modalDeleteBtn.addEventListener('click', deleteOrderFromFirestore);
    // modalGoToEditBtn का onclick लॉजिक editOrder फंक्शन में सेट होगा

    // स्टाइल जोड़ें
    addCustomStyles();

    // Firebase तैयार होने का इंतज़ार करें और Listener शुरू करें
    const checkDbInterval = setInterval(() => {
        if (window.db) {
            clearInterval(checkDbInterval);
            console.log("DB ready, starting order listener.");
            listenToOrders();
        } else { console.log("Waiting for DB..."); }
    }, 100);

    console.log("order_history.js initialization setup complete.");
});